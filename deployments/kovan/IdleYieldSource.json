{
  "address": "0xf0dFDbD5d93C36BDF352790A241AD932f3Ed1c78",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "idleToken",
          "type": "address"
        }
      ],
      "name": "IdleYieldSourceInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RedeemedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Sponsored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "SuppliedTokenTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TransferredERC20",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balanceOfToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idleToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_idleToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sponsor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "supplyTokenTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnderlyingAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8c6ff553a083d1e8349fe76a1b951603ba7021f003d82122ef1756956350431",
  "receipt": {
    "to": null,
    "from": "0x2031d045f56e679925bFdCDa3416448Cc9B1b688",
    "contractAddress": "0xf0dFDbD5d93C36BDF352790A241AD932f3Ed1c78",
    "transactionIndex": 0,
    "gasUsed": "879224",
    "logsBloom": "0x
    "blockHash": "0x725e91904f8206e1f8836d45db0db5db12889de5c3688618f8d008678a4753ef",
    "transactionHash": "0xf8c6ff553a083d1e8349fe76a1b951603ba7021f003d82122ef1756956350431",
    "logs": [],
    "blockNumber": 24670457,
    "cumulativeGasUsed": "879224",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4b85986c24c40910be9065c411e8ff0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"idleToken\",\"type\":\"address\"}],\"name\":\"IdleYieldSourceInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sponsored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SuppliedTokenTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TransferredERC20\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_idleToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"supplyTokenTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlyingAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Sunny Radadiya\",\"kind\":\"dev\",\"methods\":{\"balanceOfToken(address)\":{\"returns\":{\"_0\":\"The underlying balance of asset tokens\"}},\"depositToken()\":{\"returns\":{\"_0\":\"The ERC20 asset token\"}},\"initialize(address)\":{\"params\":{\"_idleToken\":\"Idle Token address\"}},\"redeemToken(uint256)\":{\"params\":{\"redeemAmount\":\"The amount of `token()` to withdraw.  Denominated in `token()` as above.\"},\"returns\":{\"_0\":\"The actual amount of tokens that were redeemed.\"}},\"sponsor(uint256)\":{\"details\":\"This allows anyone to distribute tokens among the share holders\",\"params\":{\"amount\":\"The amount of tokens to deposit\"}},\"supplyTokenTo(uint256,address)\":{\"params\":{\"mintAmount\":\"The amount of `token()` to be supplied\",\"to\":\"The user whose balance will receive the tokens\"}}},\"title\":\"An pooltogether yield source for Idle token\",\"version\":1},\"userdoc\":{\"events\":{\"IdleYieldSourceInitialized(address)\":{\"notice\":\"Emitted when the yield source is initialized\"},\"RedeemedToken(address,uint256,uint256)\":{\"notice\":\"Emitted when asset tokens are redeemed from the yield source\"},\"Sponsored(address,uint256)\":{\"notice\":\"Emitted when asset tokens are supplied to sponsor the yield source\"},\"SuppliedTokenTo(address,uint256,uint256,address)\":{\"notice\":\"Emitted when asset tokens are supplied to the yield source\"},\"TransferredERC20(address,address,uint256,address)\":{\"notice\":\"Emitted when ERC20 tokens other than yield source's aToken are withdrawn from the yield source\"}},\"kind\":\"user\",\"methods\":{\"balanceOfToken(address)\":{\"notice\":\"Returns the total balance (in asset tokens).  This includes the deposits and interest.\"},\"depositToken()\":{\"notice\":\"Returns the ERC20 asset token used for deposits.\"},\"initialize(address)\":{\"notice\":\"Initializes the yield source with Idle Token\"},\"redeemToken(uint256)\":{\"notice\":\"Redeems tokens from the yield source from the msg.sender, it burn yield bearing tokens and return token to the sender.\"},\"sponsor(uint256)\":{\"notice\":\"Allows someone to deposit into the yield source without receiving any shares\"},\"supplyTokenTo(uint256,address)\":{\"notice\":\"Allows assets to be supplied on other user's behalf using the `to` param.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IdleYieldSource.sol\":\"IdleYieldSource\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60aac6a853246704b017e55f9d3b456debfd0a7f49dd9a99e7113bed03ef0696\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x8d4a0f2b5b760b5e2c19ed3c108d83897a4dfd5bfed97a93867918df19191e5e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc28d9f2ac7088d478d86ec6c0e1dadd48af1b2d0c1f6d497f9b652339e3002ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"contracts/IdleYieldSource.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\"; \\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"./interfaces/pooltogether/IProtocolYieldSource.sol\\\";\\r\\nimport \\\"./interfaces/idle/IIdleToken.sol\\\";\\r\\nimport \\\"./interfaces/idle/IIdleTokenHelper.sol\\\";\\r\\n\\r\\n/// @title An pooltogether yield source for Idle token\\r\\n/// @author Sunny Radadiya\\r\\ncontract IdleYieldSource is IProtocolYieldSource, Initializable, ReentrancyGuardUpgradeable  {\\r\\n    // using SafeMathUpgradeable for uint256;\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n    mapping(address => uint256) public balances;\\r\\n\\r\\n    address public idleToken;\\r\\n    address public underlyingAsset;\\r\\n    uint256 public totalUnderlyingAssets;\\r\\n    uint256 public maxValue = 2**256 - 1;\\r\\n\\r\\n    /// @notice Emitted when the yield source is initialized\\r\\n    event IdleYieldSourceInitialized(address indexed idleToken);\\r\\n\\r\\n    /// @notice Emitted when asset tokens are redeemed from the yield source\\r\\n    event RedeemedToken(\\r\\n        address indexed from,\\r\\n        uint256 shares,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when asset tokens are supplied to the yield source\\r\\n    event SuppliedTokenTo(\\r\\n        address indexed from,\\r\\n        uint256 shares,\\r\\n        uint256 amount,\\r\\n        address indexed to\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when asset tokens are supplied to sponsor the yield source\\r\\n    event Sponsored(\\r\\n        address indexed from,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when ERC20 tokens other than yield source's aToken are withdrawn from the yield source\\r\\n    event TransferredERC20(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 amount,\\r\\n        IERC20Upgradeable indexed token\\r\\n    );\\r\\n\\r\\n    /// @notice Initializes the yield source with Idle Token\\r\\n    /// @param _idleToken Idle Token address\\r\\n    function initialize(\\r\\n        address _idleToken\\r\\n    ) public initializer {\\r\\n\\r\\n        idleToken = _idleToken;\\r\\n        underlyingAsset = IIdleToken(idleToken).token();\\r\\n\\r\\n        IERC20Upgradeable(underlyingAsset).safeApprove(idleToken, 2**256 - 1);\\r\\n        emit IdleYieldSourceInitialized(idleToken);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the ERC20 asset token used for deposits.\\r\\n    /// @return The ERC20 asset token\\r\\n    function depositToken() external view override returns (address) {\\r\\n        return (underlyingAsset);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\\r\\n    /// @return The underlying balance of asset tokens\\r\\n    function balanceOfToken(address addr) external view override returns (uint256) {\\r\\n        if (balances[addr] == 0) return 0;\\r\\n        return _sharesToToken(balances[addr]);\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the balance of Total idle Tokens Contract hasv\\r\\n    /// @return balance of Idle Tokens\\r\\n    function _totalShare() internal view returns(uint256) {\\r\\n        return IIdleToken(idleToken).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the number of shares that should be mint or burned when a user deposit or withdraw\\r\\n    /// @param tokens Amount of tokens\\r\\n    /// @return Number of shares\\r\\n    function _tokenToShares(uint256 tokens) internal view returns (uint256) {\\r\\n        uint256 shares = 0;\\r\\n        if(_totalShare() == 0) {\\r\\n            shares = tokens;\\r\\n        } else {\\r\\n            shares = (tokens * _totalShare())  / totalUnderlyingAssets;\\r\\n        }\\r\\n        return shares;\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the number of tokens a user has in the yield source\\r\\n    /// @param shares Amount of shares\\r\\n    /// @return Number of tokens\\r\\n    function _sharesToToken(uint256 shares) internal view returns (uint256) { \\r\\n        uint256 tokens = 0;\\r\\n        if(_totalShare() == 0) {\\r\\n            tokens = shares;\\r\\n        } else {\\r\\n            tokens = (shares * totalUnderlyingAssets) / _totalShare();\\r\\n        }\\r\\n        return tokens;\\r\\n    }\\r\\n\\r\\n    /// @notice Deposit asset tokens to Aave\\r\\n    /// @param mintAmount The amount of asset tokens to be deposited\\r\\n    /// @return 0 if successful \\r\\n    function _depositToIdle(uint256 mintAmount) internal returns (uint256) {\\r\\n        IERC20Upgradeable(underlyingAsset).safeTransferFrom(msg.sender, address(this), mintAmount);\\r\\n        IERC20Upgradeable(underlyingAsset).safeApprove(idleToken, mintAmount);\\r\\n        uint256 mintedTokens = IIdleToken(idleToken).mintIdleToken(mintAmount, false, address(0));\\r\\n        return mintedTokens;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows assets to be supplied on other user's behalf using the `to` param.\\r\\n    /// @param mintAmount The amount of `token()` to be supplied\\r\\n    /// @param to The user whose balance will receive the tokens\\r\\n    function supplyTokenTo(uint256 mintAmount, address to) public nonReentrant override {\\r\\n        uint256 mintedTokens = _depositToIdle(mintAmount);\\r\\n        balances[to] = balances[to] + mintedTokens;\\r\\n        totalUnderlyingAssets = totalUnderlyingAssets + mintAmount;\\r\\n        emit SuppliedTokenTo(msg.sender, mintedTokens, mintAmount, to);\\r\\n    }\\r\\n\\r\\n    /// @notice Redeems tokens from the yield source from the msg.sender, it burn yield bearing tokens and return token to the sender.\\r\\n    /// @param redeemAmount The amount of `token()` to withdraw.  Denominated in `token()` as above.\\r\\n    /// @return The actual amount of tokens that were redeemed.\\r\\n    function redeemToken(uint256 redeemAmount) public override nonReentrant returns (uint256) {\\r\\n        uint256 _idleShare = _tokenToShares(redeemAmount);\\r\\n        require(balances[msg.sender] >= _idleShare, \\\"RedeemToken: Not Enough Deposited\\\");\\r\\n        uint256 redeemedUnderlyingAsset = IIdleToken(idleToken).redeemIdleToken(_idleShare);\\r\\n        balances[msg.sender] = balances[msg.sender] - _idleShare;\\r\\n        totalUnderlyingAssets = totalUnderlyingAssets - redeemAmount;\\r\\n        IERC20Upgradeable(underlyingAsset).safeTransfer(msg.sender, redeemedUnderlyingAsset);\\r\\n        emit RedeemedToken(msg.sender, _idleShare, redeemAmount);\\r\\n        return redeemedUnderlyingAsset;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows someone to deposit into the yield source without receiving any shares\\r\\n    /// @dev This allows anyone to distribute tokens among the share holders\\r\\n    /// @param amount The amount of tokens to deposit\\r\\n    function sponsor(uint256 amount) external override {\\r\\n        _depositToIdle(amount);\\r\\n        emit Sponsored(msg.sender, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x71a69f803d803f3a97376f9048ee4092b43b0be8dc3666de726c5a6d5db51c5d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/idle/IIdleToken.sol\":{\"content\":\"pragma solidity 0.8.4;\\r\\n\\r\\ninterface IIdleToken {\\r\\n  function token() external returns (address underlying);\\r\\n  function govTokens(uint256) external returns (address govToken);\\r\\n  function userAvgPrices(address) external returns (uint256 avgPrice);\\r\\n  function mintIdleToken(uint256 _amount, bool _skipWholeRebalance, address _referral) external returns (uint256 mintedTokens);\\r\\n  function redeemIdleToken(uint256 _amount) external returns (uint256 redeemedTokens);\\r\\n  function redeemInterestBearingTokens(uint256 _amount) external;\\r\\n  function rebalance() external returns (bool);\\r\\n  function rebalanceWithGST() external returns (bool);\\r\\n  function tokenPrice() external view returns (uint256 price);\\r\\n  function getAPRs() external view returns (address[] memory addresses, uint256[] memory aprs);\\r\\n  function getAvgAPR() external view returns (uint256 avgApr);\\r\\n  function decimals() external view returns (uint256);\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n  function getGovTokensAmounts(address _usr) external view returns (uint256[] memory _amounts);\\r\\n  function openRebalance(uint256[] calldata _newAllocations) external returns (bool, uint256 avgApr);\\r\\n}\",\"keccak256\":\"0xe3b9b333a2a7f8205c93f682c26fcce12a394184c0bc30d2270eca50e3599358\"},\"contracts/interfaces/idle/IIdleTokenHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IIdleTokenHelper {\\r\\n    function getRedeemPrice(address idleYieldToken, address user) external view returns (uint256);\\r\\n    function getRedeemPrice(address idleYieldToken) external view returns (uint256);\\r\\n    function getMintingPrice(address idleYieldToken) external view returns (uint256);\\r\\n}\",\"keccak256\":\"0xcfdda73ae7c1576ee7ec5a116ffaa1ea95ba699932e319f9f2257efcf1f17dd7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/pooltogether/IProtocolYieldSource.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"./IYieldSource.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\n/// @title The interface used for all Yield Sources for the PoolTogether protocol\\r\\n/// @dev There are two privileged roles: the owner and the asset manager.  The owner can configure the asset managers.\\r\\ninterface IProtocolYieldSource is IYieldSource {\\r\\n\\r\\n  /// @notice Allows someone to deposit into the yield source without receiving any shares.  The deposited token will be the same as token()\\r\\n  /// This allows anyone to distribute tokens among the share holders.\\r\\n  function sponsor(uint256 amount) external;\\r\\n}\",\"keccak256\":\"0x3df9de2beef749a8ef3d2274edfe61e426e3634d9d02328f3b31938cd2753db3\",\"license\":\"MIT\"},\"contracts/interfaces/pooltogether/IYieldSource.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/// @title Defines the functions used to interact with a yield source.  The Prize Pool inherits this contract.\\r\\n/// @notice Prize Pools subclasses need to implement this interface so that yield can be generated.\\r\\ninterface IYieldSource {\\r\\n\\r\\n  /// @notice Returns the ERC20 asset token used for deposits.\\r\\n  /// @return The ERC20 asset token\\r\\n  function depositToken() external view returns (address);\\r\\n\\r\\n  /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\\r\\n  /// @return The underlying balance of asset tokens\\r\\n  function balanceOfToken(address addr) external returns (uint256);\\r\\n\\r\\n  /// @notice Supplies tokens to the yield source.  Allows assets to be supplied on other user's behalf using the `to` param.\\r\\n  /// @param amount The amount of `token()` to be supplied\\r\\n  /// @param to The user whose balance will receive the tokens\\r\\n  function supplyTokenTo(uint256 amount, address to) external;\\r\\n\\r\\n  /// @notice Redeems tokens from the yield source.\\r\\n  /// @param amount The amount of `token()` to withdraw.  Denominated in `token()` as above.\\r\\n  /// @return The actual amount of tokens that were redeemed.\\r\\n  function redeemToken(uint256 amount) external returns (uint256);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xa223024e7c65440583613c90ba9f6bbcd56f88e92477d0997e00390c8ef82583\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260001960375534801561001657600080fd5b50610e94806100266000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806387a6eeef1161007157806387a6eeef1461013b57806394a5c2e414610150578063b6cce5e214610159578063b99152d01461016c578063c4d66de81461017f578063c89039c51461019257600080fd5b8063013054c2146100ae57806327e235e3146100d45780632dd60c5e146100f45780634fb9bbba1461011f5780637158da7c14610128575b600080fd5b6100c16100bc366004610ce8565b6101a3565b6040519081526020015b60405180910390f35b6100c16100e2366004610c90565b60336020526000908152604090205481565b603454610107906001600160a01b031681565b6040516001600160a01b0390911681526020016100cb565b6100c160365481565b603554610107906001600160a01b031681565b61014e610149366004610d18565b610394565b005b6100c160375481565b61014e610167366004610ce8565b610497565b6100c161017a366004610c90565b6104d9565b61014e61018d366004610c90565b610526565b6035546001600160a01b0316610107565b6000600260015414156101fd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600155600061020d836106cf565b336000908152603360205260409020549091508111156102795760405162461bcd60e51b815260206004820152602160248201527f52656465656d546f6b656e3a204e6f7420456e6f756768204465706f736974656044820152601960fa1b60648201526084016101f4565b6034546040516345985a8b60e11b8152600481018390526000916001600160a01b031690638b30b51690602401602060405180830381600087803b1580156102c057600080fd5b505af11580156102d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f89190610d00565b33600090815260336020526040902054909150610316908390610ded565b33600090815260336020526040902055603654610334908590610ded565b60365560355461034e906001600160a01b0316338361070b565b604080518381526020810186905233917f5c9b0a8fe13a826ca676f5ad4f98c747b5086beb79ab58589b8211b62fa32fb9910160405180910390a2600180559392505050565b600260015414156103e75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101f4565b600260015560006103f783610773565b6001600160a01b03831660009081526033602052604090205490915061041e908290610d96565b6001600160a01b038316600090815260336020526040902055603654610445908490610d96565b60365560408051828152602081018590526001600160a01b0384169133917fdef5cc95ad9b1c65c586d0fce815ec764b575719636edf58ff2553ae6f110452910160405180910390a350506001805550565b6104a081610773565b5060405181815233907fbb2c10eb8b0d65523a501a1c079906e38af3c4231e31b799d408daacd7ce72269060200160405180910390a250565b6001600160a01b0381166000908152603360205260408120546104fe57506000919050565b6001600160a01b03821660009081526033602052604090205461052090610838565b92915050565b600054610100900460ff168061053f575060005460ff16155b6105a25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101f4565b600054610100900460ff161580156105c4576000805461ffff19166101011790555b603480546001600160a01b0319166001600160a01b03841690811790915560408051637e062a3560e11b8152905163fc0c546a916004808201926020929091908290030181600087803b15801561061a57600080fd5b505af115801561062e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106529190610cac565b603580546001600160a01b0319166001600160a01b039283169081179091556034546106819216600019610863565b6034546040516001600160a01b03909116907f795e3042efad8c5d441d3c1a8cb34f31d2c27dba7a6d188d0242de49b828dcd790600090a280156106cb576000805461ff00191690555b5050565b6000806106da610987565b6106e5575081610520565b6036546106f0610987565b6106fa9085610dce565b6107049190610dae565b9392505050565b6040516001600160a01b03831660248201526044810182905261076e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610a08565b505050565b60355460009061078e906001600160a01b0316333085610ada565b6034546035546107ab916001600160a01b03918216911684610863565b603454604051632befabbf60e01b81526004810184905260006024820181905260448201819052916001600160a01b031690632befabbf90606401602060405180830381600087803b15801561080057600080fd5b505af1158015610814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107049190610d00565b600080610843610987565b61084e575081610520565b610856610987565b6036546106fa9085610dce565b8015806108ec5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156108b257600080fd5b505afa1580156108c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ea9190610d00565b155b6109575760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016101f4565b6040516001600160a01b03831660248201526044810182905261076e90849063095ea7b360e01b90606401610737565b6034546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156109cb57600080fd5b505afa1580156109df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a039190610d00565b905090565b6000610a5d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b189092919063ffffffff16565b80519091501561076e5780806020019051810190610a7b9190610cc8565b61076e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101f4565b6040516001600160a01b0380851660248301528316604482015260648101829052610b129085906323b872dd60e01b90608401610737565b50505050565b6060610b278484600085610b2f565b949350505050565b606082471015610b905760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101f4565b843b610bde5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101f4565b600080866001600160a01b03168587604051610bfa9190610d47565b60006040518083038185875af1925050503d8060008114610c37576040519150601f19603f3d011682016040523d82523d6000602084013e610c3c565b606091505b5091509150610c4c828286610c57565b979650505050505050565b60608315610c66575081610704565b825115610c765782518084602001fd5b8160405162461bcd60e51b81526004016101f49190610d63565b600060208284031215610ca1578081fd5b813561070481610e46565b600060208284031215610cbd578081fd5b815161070481610e46565b600060208284031215610cd9578081fd5b81518015158114610704578182fd5b600060208284031215610cf9578081fd5b5035919050565b600060208284031215610d11578081fd5b5051919050565b60008060408385031215610d2a578081fd5b823591506020830135610d3c81610e46565b809150509250929050565b60008251610d59818460208701610e04565b9190910192915050565b6020815260008251806020840152610d82816040850160208701610e04565b601f01601f19169190910160400192915050565b60008219821115610da957610da9610e30565b500190565b600082610dc957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610de857610de8610e30565b500290565b600082821015610dff57610dff610e30565b500390565b60005b83811015610e1f578181015183820152602001610e07565b83811115610b125750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610e5b57600080fd5b5056fea2646970667358221220bae454b84fb7c7c9e852181db3cc36877e5eb103614fe91b4d312e090b95901b64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806387a6eeef1161007157806387a6eeef1461013b57806394a5c2e414610150578063b6cce5e214610159578063b99152d01461016c578063c4d66de81461017f578063c89039c51461019257600080fd5b8063013054c2146100ae57806327e235e3146100d45780632dd60c5e146100f45780634fb9bbba1461011f5780637158da7c14610128575b600080fd5b6100c16100bc366004610ce8565b6101a3565b6040519081526020015b60405180910390f35b6100c16100e2366004610c90565b60336020526000908152604090205481565b603454610107906001600160a01b031681565b6040516001600160a01b0390911681526020016100cb565b6100c160365481565b603554610107906001600160a01b031681565b61014e610149366004610d18565b610394565b005b6100c160375481565b61014e610167366004610ce8565b610497565b6100c161017a366004610c90565b6104d9565b61014e61018d366004610c90565b610526565b6035546001600160a01b0316610107565b6000600260015414156101fd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600155600061020d836106cf565b336000908152603360205260409020549091508111156102795760405162461bcd60e51b815260206004820152602160248201527f52656465656d546f6b656e3a204e6f7420456e6f756768204465706f736974656044820152601960fa1b60648201526084016101f4565b6034546040516345985a8b60e11b8152600481018390526000916001600160a01b031690638b30b51690602401602060405180830381600087803b1580156102c057600080fd5b505af11580156102d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f89190610d00565b33600090815260336020526040902054909150610316908390610ded565b33600090815260336020526040902055603654610334908590610ded565b60365560355461034e906001600160a01b0316338361070b565b604080518381526020810186905233917f5c9b0a8fe13a826ca676f5ad4f98c747b5086beb79ab58589b8211b62fa32fb9910160405180910390a2600180559392505050565b600260015414156103e75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101f4565b600260015560006103f783610773565b6001600160a01b03831660009081526033602052604090205490915061041e908290610d96565b6001600160a01b038316600090815260336020526040902055603654610445908490610d96565b60365560408051828152602081018590526001600160a01b0384169133917fdef5cc95ad9b1c65c586d0fce815ec764b575719636edf58ff2553ae6f110452910160405180910390a350506001805550565b6104a081610773565b5060405181815233907fbb2c10eb8b0d65523a501a1c079906e38af3c4231e31b799d408daacd7ce72269060200160405180910390a250565b6001600160a01b0381166000908152603360205260408120546104fe57506000919050565b6001600160a01b03821660009081526033602052604090205461052090610838565b92915050565b600054610100900460ff168061053f575060005460ff16155b6105a25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101f4565b600054610100900460ff161580156105c4576000805461ffff19166101011790555b603480546001600160a01b0319166001600160a01b03841690811790915560408051637e062a3560e11b8152905163fc0c546a916004808201926020929091908290030181600087803b15801561061a57600080fd5b505af115801561062e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106529190610cac565b603580546001600160a01b0319166001600160a01b039283169081179091556034546106819216600019610863565b6034546040516001600160a01b03909116907f795e3042efad8c5d441d3c1a8cb34f31d2c27dba7a6d188d0242de49b828dcd790600090a280156106cb576000805461ff00191690555b5050565b6000806106da610987565b6106e5575081610520565b6036546106f0610987565b6106fa9085610dce565b6107049190610dae565b9392505050565b6040516001600160a01b03831660248201526044810182905261076e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610a08565b505050565b60355460009061078e906001600160a01b0316333085610ada565b6034546035546107ab916001600160a01b03918216911684610863565b603454604051632befabbf60e01b81526004810184905260006024820181905260448201819052916001600160a01b031690632befabbf90606401602060405180830381600087803b15801561080057600080fd5b505af1158015610814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107049190610d00565b600080610843610987565b61084e575081610520565b610856610987565b6036546106fa9085610dce565b8015806108ec5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156108b257600080fd5b505afa1580156108c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ea9190610d00565b155b6109575760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016101f4565b6040516001600160a01b03831660248201526044810182905261076e90849063095ea7b360e01b90606401610737565b6034546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156109cb57600080fd5b505afa1580156109df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a039190610d00565b905090565b6000610a5d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b189092919063ffffffff16565b80519091501561076e5780806020019051810190610a7b9190610cc8565b61076e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101f4565b6040516001600160a01b0380851660248301528316604482015260648101829052610b129085906323b872dd60e01b90608401610737565b50505050565b6060610b278484600085610b2f565b949350505050565b606082471015610b905760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101f4565b843b610bde5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101f4565b600080866001600160a01b03168587604051610bfa9190610d47565b60006040518083038185875af1925050503d8060008114610c37576040519150601f19603f3d011682016040523d82523d6000602084013e610c3c565b606091505b5091509150610c4c828286610c57565b979650505050505050565b60608315610c66575081610704565b825115610c765782518084602001fd5b8160405162461bcd60e51b81526004016101f49190610d63565b600060208284031215610ca1578081fd5b813561070481610e46565b600060208284031215610cbd578081fd5b815161070481610e46565b600060208284031215610cd9578081fd5b81518015158114610704578182fd5b600060208284031215610cf9578081fd5b5035919050565b600060208284031215610d11578081fd5b5051919050565b60008060408385031215610d2a578081fd5b823591506020830135610d3c81610e46565b809150509250929050565b60008251610d59818460208701610e04565b9190910192915050565b6020815260008251806020840152610d82816040850160208701610e04565b601f01601f19169190910160400192915050565b60008219821115610da957610da9610e30565b500190565b600082610dc957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610de857610de8610e30565b500290565b600082821015610dff57610dff610e30565b500390565b60005b83811015610e1f578181015183820152602001610e07565b83811115610b125750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610e5b57600080fd5b5056fea2646970667358221220bae454b84fb7c7c9e852181db3cc36877e5eb103614fe91b4d312e090b95901b64736f6c63430008040033",
  "devdoc": {
    "author": "Sunny Radadiya",
    "kind": "dev",
    "methods": {
      "balanceOfToken(address)": {
        "returns": {
          "_0": "The underlying balance of asset tokens"
        }
      },
      "depositToken()": {
        "returns": {
          "_0": "The ERC20 asset token"
        }
      },
      "initialize(address)": {
        "params": {
          "_idleToken": "Idle Token address"
        }
      },
      "redeemToken(uint256)": {
        "params": {
          "redeemAmount": "The amount of `token()` to withdraw.  Denominated in `token()` as above."
        },
        "returns": {
          "_0": "The actual amount of tokens that were redeemed."
        }
      },
      "sponsor(uint256)": {
        "details": "This allows anyone to distribute tokens among the share holders",
        "params": {
          "amount": "The amount of tokens to deposit"
        }
      },
      "supplyTokenTo(uint256,address)": {
        "params": {
          "mintAmount": "The amount of `token()` to be supplied",
          "to": "The user whose balance will receive the tokens"
        }
      }
    },
    "title": "An pooltogether yield source for Idle token",
    "version": 1
  },
  "userdoc": {
    "events": {
      "IdleYieldSourceInitialized(address)": {
        "notice": "Emitted when the yield source is initialized"
      },
      "RedeemedToken(address,uint256,uint256)": {
        "notice": "Emitted when asset tokens are redeemed from the yield source"
      },
      "Sponsored(address,uint256)": {
        "notice": "Emitted when asset tokens are supplied to sponsor the yield source"
      },
      "SuppliedTokenTo(address,uint256,uint256,address)": {
        "notice": "Emitted when asset tokens are supplied to the yield source"
      },
      "TransferredERC20(address,address,uint256,address)": {
        "notice": "Emitted when ERC20 tokens other than yield source's aToken are withdrawn from the yield source"
      }
    },
    "kind": "user",
    "methods": {
      "balanceOfToken(address)": {
        "notice": "Returns the total balance (in asset tokens).  This includes the deposits and interest."
      },
      "depositToken()": {
        "notice": "Returns the ERC20 asset token used for deposits."
      },
      "initialize(address)": {
        "notice": "Initializes the yield source with Idle Token"
      },
      "redeemToken(uint256)": {
        "notice": "Redeems tokens from the yield source from the msg.sender, it burn yield bearing tokens and return token to the sender."
      },
      "sponsor(uint256)": {
        "notice": "Allows someone to deposit into the yield source without receiving any shares"
      },
      "supplyTokenTo(uint256,address)": {
        "notice": "Allows assets to be supplied on other user's behalf using the `to` param."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 137,
        "contract": "contracts/IdleYieldSource.sol:IdleYieldSource",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 140,
        "contract": "contracts/IdleYieldSource.sol:IdleYieldSource",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 191,
        "contract": "contracts/IdleYieldSource.sol:IdleYieldSource",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 234,
        "contract": "contracts/IdleYieldSource.sol:IdleYieldSource",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1377,
        "contract": "contracts/IdleYieldSource.sol:IdleYieldSource",
        "label": "balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1379,
        "contract": "contracts/IdleYieldSource.sol:IdleYieldSource",
        "label": "idleToken",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 1381,
        "contract": "contracts/IdleYieldSource.sol:IdleYieldSource",
        "label": "underlyingAsset",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 1383,
        "contract": "contracts/IdleYieldSource.sol:IdleYieldSource",
        "label": "totalUnderlyingAssets",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 1390,
        "contract": "contracts/IdleYieldSource.sol:IdleYieldSource",
        "label": "maxValue",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}