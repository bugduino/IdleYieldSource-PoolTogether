{
  "language": "Solidity",
  "sources": {
    "contracts/access/AssetManager.sol": {
      "content": "  \r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\r\n\r\n/**\r\n*  @title Abstract ownable contract with additional assetManager role\r\n * @notice Contract module based on Ownable which provides a basic access control mechanism, where\r\n * there is an account (an asset manager) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The asset manager account needs to be set using {setAssetManager}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyAssetManager`, which can be applied to your functions to restrict their use to\r\n * the asset manager.\r\n */\r\nabstract contract AssetManager is ContextUpgradeable, OwnableUpgradeable {\r\n    address private _assetManager;\r\n\r\n    /**\r\n     * @dev Emitted when the _assetManager has been changed\r\n     * @param previousAssetManager address of the former _assetManager\r\n     * @param newAssetManager address of the new _assetManager\r\n     */\r\n    event AssetManagerTransferred(address indexed previousAssetManager, address indexed newAssetManager);\r\n\r\n    /**\r\n     * @notice Gets the current _assetManager\r\n     * @dev Returns the address of the current asset manager.\r\n     * @return The address of the current _assetManager\r\n     */\r\n    function assetManager() public view virtual returns (address) {\r\n        return _assetManager;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner or asset manager.\r\n     */\r\n    modifier onlyOwnerOrAssetManager() {\r\n        require(assetManager() == _msgSender() || owner() == _msgSender(), \"onlyOwnerOrAssetManager: caller is not owner or asset manager\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the initial asset manager\r\n     * @dev Throws if called by any account other than the owner.\r\n     * @param newAssetManager The address of the desired new _assetManager\r\n     * @return Boolean to indicate if the operation was successful or not\r\n     */\r\n    function setAssetManager(address newAssetManager) public virtual onlyOwner returns (bool) {\r\n        _assetManager = newAssetManager;\r\n        emit AssetManagerTransferred(address(0), newAssetManager);\r\n        return true;\r\n    }\r\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overloaded;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/test/SafeERC20WrapperUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\n\r\n// Mock implementation from OpenZeppelin modified for our usage in tests\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/mocks/SafeERC20HelperUpgradeable.sol\r\ncontract ERC20ReturnTrueMockUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\r\n    // solhint-disable func-name-mixedcase\r\n    function __ERC20ReturnTrueMock_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20ReturnTrueMock_init_unchained();\r\n    }\r\n\r\n    // solhint-disable func-name-mixedcase\r\n    function __ERC20ReturnTrueMock_init_unchained() internal initializer {\r\n    }\r\n    mapping (address => uint256) private _allowances;\r\n\r\n    // IERC20's functions are not pure, but these mock implementations are: to prevent Solidity from issuing warnings,\r\n    // we write to a dummy state variable.\r\n    uint256 private _dummy;\r\n\r\n    function transfer(address, uint256) public override returns (bool) {\r\n        _dummy = 0;\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address, address, uint256) public override returns (bool) {\r\n        _dummy = 0;\r\n        return true;\r\n    }\r\n\r\n    function approve(address, uint256) public override returns (bool) {\r\n        _dummy = 0;\r\n        return true;\r\n    }\r\n\r\n    function setAllowance(uint256 allowance_) public {\r\n        _allowances[_msgSender()] = allowance_;\r\n    }\r\n\r\n    function allowance(address owner, address) public view override returns (uint256) {\r\n        return _allowances[owner];\r\n    }\r\n    uint256[48] private __gap;\r\n}\r\n\r\ncontract SafeERC20WrapperUpgradeable is Initializable, ContextUpgradeable {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    IERC20Upgradeable private _token;\r\n\r\n    // solhint-disable func-name-mixedcase\r\n    function __SafeERC20Wrapper_init(IERC20Upgradeable token) internal initializer {\r\n        __Context_init_unchained();\r\n        __SafeERC20Wrapper_init_unchained(token);\r\n    }\r\n\r\n    // solhint-disable func-name-mixedcase\r\n    function __SafeERC20Wrapper_init_unchained(IERC20Upgradeable token) internal initializer {\r\n        _token = token;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        _token.balanceOf(account);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _token.safeTransfer(recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _token.safeTransferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _token.safeApprove(spender, amount);\r\n    }\r\n\r\n    function increaseAllowance(uint256 amount) public {\r\n        _token.safeIncreaseAllowance(address(0), amount);\r\n    }\r\n\r\n    function decreaseAllowance(uint256 amount) public {\r\n        _token.safeDecreaseAllowance(address(0), amount);\r\n    }\r\n\r\n    function setAllowance(uint256 allowance_) public {\r\n        ERC20ReturnTrueMockUpgradeable(address(_token)).setAllowance(allowance_);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _token.allowance(owner, spender);\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/pooltogether/IProtocolYieldSource.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"./IYieldSource.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\n/// @title The interface used for all Yield Sources for the PoolTogether protocol\r\n/// @dev There are two privileged roles: the owner and the asset manager.  The owner can configure the asset managers.\r\ninterface IProtocolYieldSource is IYieldSource {\r\n\r\n  /// @notice Allows someone to deposit into the yield source without receiving any shares.  The deposited token will be the same as token()\r\n  /// This allows anyone to distribute tokens among the share holders.\r\n  function sponsor(uint256 amount) external;\r\n}"
    },
    "contracts/interfaces/pooltogether/IYieldSource.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\n/// @title Defines the functions used to interact with a yield source.  The Prize Pool inherits this contract.\r\n/// @notice Prize Pools subclasses need to implement this interface so that yield can be generated.\r\ninterface IYieldSource {\r\n\r\n  /// @notice Returns the ERC20 asset token used for deposits.\r\n  /// @return The ERC20 asset token\r\n  function depositToken() external view returns (address);\r\n\r\n  /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\r\n  /// @return The underlying balance of asset tokens\r\n  function balanceOfToken(address addr) external returns (uint256);\r\n\r\n  /// @notice Supplies tokens to the yield source.  Allows assets to be supplied on other user's behalf using the `to` param.\r\n  /// @param amount The amount of `token()` to be supplied\r\n  /// @param to The user whose balance will receive the tokens\r\n  function supplyTokenTo(uint256 amount, address to) external;\r\n\r\n  /// @notice Redeems tokens from the yield source.\r\n  /// @param amount The amount of `token()` to withdraw.  Denominated in `token()` as above.\r\n  /// @return The actual amount of tokens that were redeemed.\r\n  function redeemToken(uint256 amount) external returns (uint256);\r\n\r\n}\r\n"
    },
    "contracts/IdleYieldSource.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\"; \r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"./interfaces/pooltogether/IProtocolYieldSource.sol\";\r\nimport \"./interfaces/idle/IIdleToken.sol\";\r\nimport \"./interfaces/idle/IIdleTokenHelper.sol\";\r\n\r\n/// @title An pooltogether yield source for Idle token\r\n/// @author Sunny Radadiya\r\ncontract IdleYieldSource is IProtocolYieldSource, Initializable, ReentrancyGuardUpgradeable  {\r\n    // using SafeMathUpgradeable for uint256;\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    mapping(address => uint256) public balances;\r\n\r\n    address public idleToken;\r\n    address public underlyingAsset;\r\n    uint256 public totalUnderlyingAssets;\r\n    uint256 public maxValue = 2**256 - 1;\r\n\r\n    /// @notice Emitted when the yield source is initialized\r\n    event IdleYieldSourceInitialized(address indexed idleToken);\r\n\r\n    /// @notice Emitted when asset tokens are redeemed from the yield source\r\n    event RedeemedToken(\r\n        address indexed from,\r\n        uint256 shares,\r\n        uint256 amount\r\n    );\r\n\r\n    /// @notice Emitted when asset tokens are supplied to the yield source\r\n    event SuppliedTokenTo(\r\n        address indexed from,\r\n        uint256 shares,\r\n        uint256 amount,\r\n        address indexed to\r\n    );\r\n\r\n    /// @notice Emitted when asset tokens are supplied to sponsor the yield source\r\n    event Sponsored(\r\n        address indexed from,\r\n        uint256 amount\r\n    );\r\n\r\n    /// @notice Emitted when ERC20 tokens other than yield source's aToken are withdrawn from the yield source\r\n    event TransferredERC20(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        IERC20Upgradeable indexed token\r\n    );\r\n\r\n    /// @notice Initializes the yield source with Idle Token\r\n    /// @param _idleToken Idle Token address\r\n    function initialize(\r\n        address _idleToken\r\n    ) public initializer {\r\n\r\n        idleToken = _idleToken;\r\n        underlyingAsset = IIdleToken(idleToken).token();\r\n\r\n        IERC20Upgradeable(underlyingAsset).safeApprove(idleToken, 2**256 - 1);\r\n        emit IdleYieldSourceInitialized(idleToken);\r\n    }\r\n\r\n    /// @notice Returns the ERC20 asset token used for deposits.\r\n    /// @return The ERC20 asset token\r\n    function depositToken() external view override returns (address) {\r\n        return (underlyingAsset);\r\n    }\r\n\r\n    /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\r\n    /// @return The underlying balance of asset tokens\r\n    function balanceOfToken(address addr) external view override returns (uint256) {\r\n        if (balances[addr] == 0) return 0;\r\n        return _sharesToToken(balances[addr]);\r\n    }\r\n\r\n    /// @notice Calculates the balance of Total idle Tokens Contract hasv\r\n    /// @return balance of Idle Tokens\r\n    function _totalShare() internal view returns(uint256) {\r\n        return IIdleToken(idleToken).balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Calculates the number of shares that should be mint or burned when a user deposit or withdraw\r\n    /// @param tokens Amount of tokens\r\n    /// @return Number of shares\r\n    function _tokenToShares(uint256 tokens) internal view returns (uint256) {\r\n        uint256 shares = 0;\r\n        if(_totalShare() == 0) {\r\n            shares = tokens;\r\n        } else {\r\n            shares = (tokens * _totalShare())  / totalUnderlyingAssets;\r\n        }\r\n        return shares;\r\n    }\r\n\r\n    /// @notice Calculates the number of tokens a user has in the yield source\r\n    /// @param shares Amount of shares\r\n    /// @return Number of tokens\r\n    function _sharesToToken(uint256 shares) internal view returns (uint256) { \r\n        uint256 tokens = 0;\r\n        if(_totalShare() == 0) {\r\n            tokens = shares;\r\n        } else {\r\n            tokens = (shares * totalUnderlyingAssets) / _totalShare();\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    /// @notice Deposit asset tokens to Aave\r\n    /// @param mintAmount The amount of asset tokens to be deposited\r\n    /// @return 0 if successful \r\n    function _depositToIdle(uint256 mintAmount) internal returns (uint256) {\r\n        IERC20Upgradeable(underlyingAsset).safeTransferFrom(msg.sender, address(this), mintAmount);\r\n        IERC20Upgradeable(underlyingAsset).safeApprove(idleToken, mintAmount);\r\n        uint256 mintedTokens = IIdleToken(idleToken).mintIdleToken(mintAmount, false, address(0));\r\n        return mintedTokens;\r\n    }\r\n\r\n    /// @notice Allows assets to be supplied on other user's behalf using the `to` param.\r\n    /// @param mintAmount The amount of `token()` to be supplied\r\n    /// @param to The user whose balance will receive the tokens\r\n    function supplyTokenTo(uint256 mintAmount, address to) public nonReentrant override {\r\n        uint256 mintedTokens = _depositToIdle(mintAmount);\r\n        balances[to] = balances[to] + mintedTokens;\r\n        totalUnderlyingAssets = totalUnderlyingAssets + mintAmount;\r\n        emit SuppliedTokenTo(msg.sender, mintedTokens, mintAmount, to);\r\n    }\r\n\r\n    /// @notice Redeems tokens from the yield source from the msg.sender, it burn yield bearing tokens and return token to the sender.\r\n    /// @param redeemAmount The amount of `token()` to withdraw.  Denominated in `token()` as above.\r\n    /// @return The actual amount of tokens that were redeemed.\r\n    function redeemToken(uint256 redeemAmount) public override nonReentrant returns (uint256) {\r\n        uint256 _idleShare = _tokenToShares(redeemAmount);\r\n        require(balances[msg.sender] >= _idleShare, \"RedeemToken: Not Enough Deposited\");\r\n        uint256 redeemedUnderlyingAsset = IIdleToken(idleToken).redeemIdleToken(_idleShare);\r\n        balances[msg.sender] = balances[msg.sender] - _idleShare;\r\n        totalUnderlyingAssets = totalUnderlyingAssets - redeemAmount;\r\n        IERC20Upgradeable(underlyingAsset).safeTransfer(msg.sender, redeemedUnderlyingAsset);\r\n        emit RedeemedToken(msg.sender, _idleShare, redeemAmount);\r\n        return redeemedUnderlyingAsset;\r\n    }\r\n\r\n    /// @notice Allows someone to deposit into the yield source without receiving any shares\r\n    /// @dev This allows anyone to distribute tokens among the share holders\r\n    /// @param amount The amount of tokens to deposit\r\n    function sponsor(uint256 amount) external override {\r\n        _depositToIdle(amount);\r\n        emit Sponsored(msg.sender, amount);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/idle/IIdleToken.sol": {
      "content": "pragma solidity 0.8.4;\r\n\r\ninterface IIdleToken {\r\n  function token() external returns (address underlying);\r\n  function govTokens(uint256) external returns (address govToken);\r\n  function userAvgPrices(address) external returns (uint256 avgPrice);\r\n  function mintIdleToken(uint256 _amount, bool _skipWholeRebalance, address _referral) external returns (uint256 mintedTokens);\r\n  function redeemIdleToken(uint256 _amount) external returns (uint256 redeemedTokens);\r\n  function redeemInterestBearingTokens(uint256 _amount) external;\r\n  function rebalance() external returns (bool);\r\n  function rebalanceWithGST() external returns (bool);\r\n  function tokenPrice() external view returns (uint256 price);\r\n  function getAPRs() external view returns (address[] memory addresses, uint256[] memory aprs);\r\n  function getAvgAPR() external view returns (uint256 avgApr);\r\n  function decimals() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function getGovTokensAmounts(address _usr) external view returns (uint256[] memory _amounts);\r\n  function openRebalance(uint256[] calldata _newAllocations) external returns (bool, uint256 avgApr);\r\n}"
    },
    "contracts/interfaces/idle/IIdleTokenHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IIdleTokenHelper {\r\n    function getRedeemPrice(address idleYieldToken, address user) external view returns (uint256);\r\n    function getRedeemPrice(address idleYieldToken) external view returns (uint256);\r\n    function getMintingPrice(address idleYieldToken) external view returns (uint256);\r\n}"
    },
    "contracts/test/IdleYieldSourceHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"../IdleYieldSource.sol\";\r\n\r\n/* solium-disable security/no-block-members */\r\ncontract IdleYieldSourceHarness is IdleYieldSource {\r\n\r\n  // using SafeMathUpgradeable for uint256;\r\n\r\n  constructor(address _idleToken) IdleYieldSource() {\r\n    idleToken = _idleToken;\r\n    underlyingAsset = IIdleToken(idleToken).token();\r\n  }\r\n\r\n  function mint(address account, uint256 amount) public returns (bool) {\r\n    balances[account] = balances[account] + amount;\r\n    // supplyTokenTo(amount, account);\r\n    return true;\r\n  }\r\n\r\n  function mintTotalUnderlyingAsset(uint256 amount) public returns (bool) {\r\n    totalUnderlyingAssets = totalUnderlyingAssets + amount;\r\n    // supplyTokenTo(amount, account);\r\n    return true;\r\n  }\r\n\r\n  function totalShare() external view returns (uint256) {\r\n      return _totalShare();\r\n  }\r\n\r\n  function tokenToShares(uint256 tokens) external view returns (uint256) {\r\n      return _tokenToShares(tokens);\r\n  }\r\n\r\n  function sharesToToken(uint256 shares) external view returns (uint256) {\r\n    return _sharesToToken(shares);\r\n  }\r\n\r\n  function totalUnderlyingAsset() external view returns (uint256) {\r\n    return totalUnderlyingAssets;\r\n  }\r\n}\r\n"
    },
    "contracts/test/IdleYieldSourceProxyFactoryHarness.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"./IdleYieldSourceHarness.sol\";\r\nimport \"../interfaces/GenericProxyFactory/IGenericProxyFactory.sol\";\r\n\r\ncontract IdleYieldSourceProxyFactoryHarness {\r\n    \r\n    IdleYieldSourceHarness public idleYieldSourceInstance;\r\n    IGenericProxyFactory public iGenericProxyFactory;\r\n\r\n    constructor(address _instance, address _iGenericProxyFactory) {\r\n        idleYieldSourceInstance = IdleYieldSourceHarness(_instance);\r\n        iGenericProxyFactory = IGenericProxyFactory(_iGenericProxyFactory);\r\n    }\r\n    \r\n    function createNewProxy(address _idleToken) \r\n        public returns (address instanceCreated, bytes memory result) {\r\n            (instanceCreated, result)= iGenericProxyFactory.create(\r\n                address(idleYieldSourceInstance),\r\n                ''\r\n                // abi.encodeWithSignature('initialize(address)', _idleToken)\r\n            );\r\n    }\r\n}"
    },
    "contracts/interfaces/GenericProxyFactory/IGenericProxyFactory.sol": {
      "content": "pragma solidity 0.8.4;\r\n\r\ninterface IGenericProxyFactory {\r\n  function create(address _instance, bytes calldata _data) external returns (address instanceCreated, bytes memory result);\r\n}"
    },
    "contracts/IdleYieldSourceProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IdleYieldSource.sol\";\r\nimport \"./interfaces/GenericProxyFactory/IGenericProxyFactory.sol\";\r\n\r\ncontract IdleYieldSourceProxyFactory {\r\n    \r\n    IdleYieldSource public idleYieldSourceInstance;\r\n    IGenericProxyFactory public iGenericProxyFactory;\r\n\r\n    constructor(address _instance, address _iGenericProxyFactory) {\r\n        idleYieldSourceInstance = IdleYieldSource(_instance);\r\n        iGenericProxyFactory = IGenericProxyFactory(_iGenericProxyFactory);\r\n    }\r\n    \r\n    function createNewProxy(address _idleToken) \r\n        public returns (address instanceCreated, bytes memory result) {\r\n            (instanceCreated, result)= iGenericProxyFactory.create(\r\n                address(idleYieldSourceInstance), \r\n                ''\r\n                // abi.encodeWithSignature('initialize(address)', _idleToken)\r\n            );\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}