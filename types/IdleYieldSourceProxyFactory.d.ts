/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IdleYieldSourceProxyFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createNewProxy(address,address)": FunctionFragment;
    "iGenericProxyFactory()": FunctionFragment;
    "idleYieldSourceInstance()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createNewProxy",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "iGenericProxyFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "idleYieldSourceInstance",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createNewProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "iGenericProxyFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "idleYieldSourceInstance",
    data: BytesLike
  ): Result;

  events: {};
}

export class IdleYieldSourceProxyFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IdleYieldSourceProxyFactoryInterface;

  functions: {
    createNewProxy(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createNewProxy(address,address)"(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    iGenericProxyFactory(overrides?: CallOverrides): Promise<[string]>;

    "iGenericProxyFactory()"(overrides?: CallOverrides): Promise<[string]>;

    idleYieldSourceInstance(overrides?: CallOverrides): Promise<[string]>;

    "idleYieldSourceInstance()"(overrides?: CallOverrides): Promise<[string]>;
  };

  createNewProxy(
    _idleToken: string,
    _iIdleTokenHelper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createNewProxy(address,address)"(
    _idleToken: string,
    _iIdleTokenHelper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  iGenericProxyFactory(overrides?: CallOverrides): Promise<string>;

  "iGenericProxyFactory()"(overrides?: CallOverrides): Promise<string>;

  idleYieldSourceInstance(overrides?: CallOverrides): Promise<string>;

  "idleYieldSourceInstance()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createNewProxy(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { instanceCreated: string; result: string }>;

    "createNewProxy(address,address)"(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { instanceCreated: string; result: string }>;

    iGenericProxyFactory(overrides?: CallOverrides): Promise<string>;

    "iGenericProxyFactory()"(overrides?: CallOverrides): Promise<string>;

    idleYieldSourceInstance(overrides?: CallOverrides): Promise<string>;

    "idleYieldSourceInstance()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    createNewProxy(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createNewProxy(address,address)"(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    iGenericProxyFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "iGenericProxyFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    idleYieldSourceInstance(overrides?: CallOverrides): Promise<BigNumber>;

    "idleYieldSourceInstance()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createNewProxy(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createNewProxy(address,address)"(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    iGenericProxyFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "iGenericProxyFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idleYieldSourceInstance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "idleYieldSourceInstance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
