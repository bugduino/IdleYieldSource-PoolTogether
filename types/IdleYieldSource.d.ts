/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IdleYieldSourceInterface extends ethers.utils.Interface {
  functions: {
    "_sharesToToken(uint256)": FunctionFragment;
    "balanceOfToken(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "depositToken()": FunctionFragment;
    "getRedeemPrice()": FunctionFragment;
    "iIdleTokenHelper()": FunctionFragment;
    "idleToken()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "redeemToken(uint256)": FunctionFragment;
    "supplyTokenTo(uint256,address)": FunctionFragment;
    "totalDepositedAssets()": FunctionFragment;
    "totalUnderlyingAssets()": FunctionFragment;
    "underlyingAsset()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_sharesToToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "iIdleTokenHelper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "idleToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyTokenTo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDepositedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlyingAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAsset",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_sharesToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "iIdleTokenHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idleToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyTokenTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDepositedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlyingAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAsset",
    data: BytesLike
  ): Result;

  events: {
    "IdleYieldSourceInitialized(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IdleYieldSourceInitialized"): EventFragment;
}

export class IdleYieldSource extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IdleYieldSourceInterface;

  functions: {
    _sharesToToken(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_sharesToToken(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfToken(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOfToken(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositToken(overrides?: CallOverrides): Promise<[string]>;

    "depositToken()"(overrides?: CallOverrides): Promise<[string]>;

    getRedeemPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRedeemPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    iIdleTokenHelper(overrides?: CallOverrides): Promise<[string]>;

    "iIdleTokenHelper()"(overrides?: CallOverrides): Promise<[string]>;

    idleToken(overrides?: CallOverrides): Promise<[string]>;

    "idleToken()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemToken(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemToken(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supplyTokenTo(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "supplyTokenTo(uint256,address)"(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalDepositedAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalDepositedAssets()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUnderlyingAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalUnderlyingAssets()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlyingAsset(overrides?: CallOverrides): Promise<[string]>;

    "underlyingAsset()"(overrides?: CallOverrides): Promise<[string]>;
  };

  _sharesToToken(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_sharesToToken(uint256)"(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfToken(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOfToken(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  "depositToken()"(overrides?: CallOverrides): Promise<string>;

  getRedeemPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "getRedeemPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  iIdleTokenHelper(overrides?: CallOverrides): Promise<string>;

  "iIdleTokenHelper()"(overrides?: CallOverrides): Promise<string>;

  idleToken(overrides?: CallOverrides): Promise<string>;

  "idleToken()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _idleToken: string,
    _iIdleTokenHelper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _idleToken: string,
    _iIdleTokenHelper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemToken(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemToken(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supplyTokenTo(
    amount: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "supplyTokenTo(uint256,address)"(
    amount: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalDepositedAssets(overrides?: CallOverrides): Promise<BigNumber>;

  "totalDepositedAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalUnderlyingAssets(overrides?: CallOverrides): Promise<BigNumber>;

  "totalUnderlyingAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

  underlyingAsset(overrides?: CallOverrides): Promise<string>;

  "underlyingAsset()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _sharesToToken(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_sharesToToken(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfToken(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfToken(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    "depositToken()"(overrides?: CallOverrides): Promise<string>;

    getRedeemPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getRedeemPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    iIdleTokenHelper(overrides?: CallOverrides): Promise<string>;

    "iIdleTokenHelper()"(overrides?: CallOverrides): Promise<string>;

    idleToken(overrides?: CallOverrides): Promise<string>;

    "idleToken()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemToken(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemToken(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supplyTokenTo(
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "supplyTokenTo(uint256,address)"(
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDepositedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "totalDepositedAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnderlyingAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "totalUnderlyingAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingAsset(overrides?: CallOverrides): Promise<string>;

    "underlyingAsset()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    IdleYieldSourceInitialized(
      idleToken: string | null
    ): TypedEventFilter<[string], { idleToken: string }>;
  };

  estimateGas: {
    _sharesToToken(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_sharesToToken(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfToken(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfToken(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    "depositToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getRedeemPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    iIdleTokenHelper(overrides?: CallOverrides): Promise<BigNumber>;

    "iIdleTokenHelper()"(overrides?: CallOverrides): Promise<BigNumber>;

    idleToken(overrides?: CallOverrides): Promise<BigNumber>;

    "idleToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemToken(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemToken(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supplyTokenTo(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "supplyTokenTo(uint256,address)"(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalDepositedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "totalDepositedAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnderlyingAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "totalUnderlyingAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingAsset()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _sharesToToken(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_sharesToToken(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfToken(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfToken(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedeemPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRedeemPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    iIdleTokenHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "iIdleTokenHelper()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idleToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "idleToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _idleToken: string,
      _iIdleTokenHelper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemToken(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemToken(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supplyTokenTo(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "supplyTokenTo(uint256,address)"(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalDepositedAssets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalDepositedAssets()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalUnderlyingAssets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalUnderlyingAssets()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlyingAsset()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
